// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
   relationMode = "prisma"
}

model User {
  id           String             @id @default(uuid())
  username     String             @unique
  name         String             @db.Text
  email        String?            @unique
  avatar_Url   String?
  bio          String?            @db.Text
  create_at    DateTime           @default(now())
  accounts     Account[]
  sessions     Session[]
  timeInterval userTimeInterval[]
  Scheduling   Scheduling[]

  @@map("users")
}

model Account {
  id                  String  @id @default(cuid())
  user_Id             String
  type                String
  provider            String
  provider_Account_Id String
  refresh_token       String?  @db.Text
  access_token        String?  @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  @db.Text
  session_state       String?

  user User @relation(fields: [user_Id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_Account_Id])
  @@map("accounts")
  @@index([user_Id])
}

model Session {
  id            String   @id @default(cuid())
  session_Token String   @unique
  user_Id       String
  expires       DateTime
  user          User     @relation(fields: [user_Id], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([user_Id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model userTimeInterval {
  id                    String @id @default(uuid())
  week_days             Int
  time_start_in_minutes Int
  time_end_in_minutes   Int

  user    User   @relation(fields: [user_Id], references: [id])
  user_Id String

  @@map("user_time_intervals")
  @@index([user_Id])
}

model Scheduling {
  id          String   @id @default(uuid())
  date        DateTime
  name        String
  email       String
  observation String?
  created_at  DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("schedulings")
  @@index([user_id])
}
